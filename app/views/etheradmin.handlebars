<link rel="stylesheet" href="style.css">
<div class="container">
  <table class="u-full-width">
    <tbody>
      <tr>
        <td>
          <img src="./assets/ledgerium_logo.png" class="main-logo"/>
          <h2 class="main-title">Governance UI</h2>
        </td>
      </tr>
      <tr>
        <td id="currentMetaMaskAccount" />
      </tr>
    </tbody>
  </table>

  <div id="menuTab">
    <span id="adminTab" class="menuItem tabSelected" onclick="showAdminTab()">Administrators</span>
    {{!-- <span id="validatorTab" class="menuItem" onclick="showValidatorTab()">Validators</span> --}}
    <span id="nodeStatusTab" class="menuItem" onclick="displayNodes()">Node Status</span>
  </div>

  <div id="transactionStatus" class="statusBar">
    <img src="./assets/progress.gif" class="statusIcon" />
    <span id="statusMessage" class="statusMessage"></span>
  </div>

  <div id="failureStatus" class="statusBar">
    <img src="./assets/errorIcon.svg" class="statusIcon" />
    <span id="errorMessage" class="statusMessage"></span>
  </div>

  <div id="adminContent">
    <table class="u-full-width" id="adminTable">
      <thead>
        <tr>
          <th>Current Admins</th>
          <th colspan="2">Action</th>
        </tr>
      </thead>
      {{#each snapshot.validators }}
      <tr>
        <td> {{this}} </td>
        <td>
          {{!-- <button onclick="castVote('{{this}}',true)" class="button-primary" name="VFButton" value="{{this}}"> Vote For </button> --}}
          <button onclick="castVote('{{this}}',false)" name="VAButton" value="{{this}}"> Vote Against </button>
        </td>
      </tr>
      {{/each }}
    </table>
    <div id="proposeAdminTable">
      <h5><b>Current Voting Snapshot</b></h5>
      {{#if snapshot.votes.length}}
      <table class="u-full-width" id="proposedAdminTable">
        <thead>
          <tr>
            <th>Admin Voted</th>
            <th>Voted For</th>
            <th colspan="2">Vote</th>
          </tr>
        </thead>
        {{#each snapshot.votes}}
        <tr>
          <td>{{this.validator}} </td>
          <td>{{this.address}} </td>
          {{#if this.authorize}}
            <td> ADD</td>
          {{else}}
            <td> REMOVE </td>
          {{/if}}  
        </tr>
        {{/each}}
      </table>
      {{else}}
      <h6> No Votes Have Been Cast yet </h6>
      {{/if}}
    </div>
    <div id="NewNodesTable">
      <h5><b> Peer Nodes In The Network</b></h5>
      <table class="u-full-width" id="newNodes">
        <thead>
          <tr>
            <th>New Nodes</th>
            <th>Action</th>
          </tr>
          <tbody></tbody>
        </thead>
      </table>
    </div>
  </div>
  <div id="validatorContent" style="display: none">
    <p id="validatorsHeader"></p>
    <p id="Nodes in use"></p>
    <table class="u-full-width" id="validatorsTable">
      <thead>
        <tr>
          <th>Account</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
  <div id="nodeStatusContent" style="display: none">
    <br />
    <br />
    <b>Consortium: {{this.consortiumid}}</b>
    {{#if hasNodeRows}}
    <table class="u-full-width" id="nodesTable">
      <thead>
        <tr>
          <th>Host Name</th>
          <th>Role</th>
          <th>IP Address</th>
          {{!-- <th>Port</th> --}}
          <th>Public Key</th>
          <th>Enode ID</th>
        </tr>
      </thead>
      <tbody>
        {{#each nodeRows}}
        <tr>
          <td>{{this.name}}</td>
          <td>{{this.role}}</td>
          <td>{{this.ip}}</td>
          {{!-- <td>{{this.port}}</td> --}}
          <td>{{this.publicKey}}</td>
          <td>{{this.enode}}</td>
        </tr>
        {{/each}}
      </tbody>
    </table>
    <hr />
    <i>As of {{this.timestamp}} (Refresh interval: ~{{this.refreshinterval}} seconds)</i>
    <hr /> {{else}}
    <h6>Waiting on all Ledgerium nodes to boot up...</h6>
    {{/if}}
  </div>
  <script src="ethereumjs-tx-1.3.3.min.js" type="text/javascript"></script>
  <script src="web3.1-beta.js"></script>
  <script src="web3util.js" type="text/javascript"></script>
  <script src="AdminValidatorSet.js" type="text/javascript"></script>
  <script src="SimpleValidatorSet.js" type="text/javascript"></script>
  <script type="text/javascript" async defer>
    var isLoaded = false;
    var localWeb3;
    var currentAccount = '';
    //console.log(data);
    const displayNodes = ()=> {
      document.getElementById('adminContent').style.display = "none";
      //document.getElementById('validatorContent').style.display = "none";
      document.getElementById('nodeStatusContent').style.display = "block";
      document.getElementById('nodeStatusTab').classList.add("tabSelected");
      document.getElementById('adminTab').classList.remove("tabSelected");
      //document.getElementById('validatorTab').classList.remove("tabSelected");
    }
    
    const showAdminTab = ()=> {
      document.getElementById('validatorContent').style.display = "none";
      document.getElementById('nodeStatusContent').style.display = "none";
      document.getElementById('adminContent').style.display = "block";
      document.getElementById('adminTab').classList.add("tabSelected");
      //document.getElementById('validatorTab').classList.remove("tabSelected");
      document.getElementById('nodeStatusTab').classList.remove("tabSelected");
    }
    
    const showError = (errorMessage) => {
      document.getElementById("transactionStatus").style.display = "none";
      document.getElementById("failureStatus").style.display = "block";
      document.getElementById("errorMessage").innerHTML = errorMessage;
    }

    const checkValidator = (address)=>{
      const validators = {{{ json this.snapshot.validators }}};
      for(var i=0;i<validators.length;i++){
        if(validators[i].toLowerCase() === address.toLowerCase())
          return true;
      }
      return false;
    }

    const errorMessage = (message) => {
      document.getElementById("transactionStatus").style.display = "none";
      document.getElementById("failureStatus").style.display = "block";
      document.getElementById("errorMessage").innerHTML = message;
    }

    const successMessage = (message) => {
      document.getElementById("failureStatus").style.display = "none";
      document.getElementById("transactionStatus").style.display = "block";
      document.getElementById("statusMessage").innerHTML = "Transaction Complete, page will refresh in 10 seconds";
    }

    const disableAllButtons = ()=>{
      var VFButtons = document.getElementsByName('VFButton');
      var VAButtons = document.getElementsByName('VAButton');
      for(var i=0; i<VFButtons.length; i++){
        VFButtons[i].style.display = "none";
      }
      for(var i=0; i<VAButtons.length; i++){
        VAButtons[i].style.display = "none";
      }
    }

    window.addEventListener('load', () => onload(), false);
    
    const onload = async function() {
      const validators = {{{ json this.snapshot.validators }}};
      const nodes      = {{{ json this.nodeRows }}};
      const votes      = {{{ json this.snapshot.votes }}}
      if(window.ledgerium){
        //latest
        localWeb3 = new Web3(ledgerium);
        try{
          await ledgerium.enable();
        }catch (err){
          alert("Please Allow Connection from ledgerium wallet");
          // ask user to connect to ledgerium wallet
        }
      /*} else if (window.web3){
        //legacy
        localWeb3 = await new Web3(window.web3.currentProvider);*/
      }else{
        showError("Please install and unlock <a href='https://github.com/ledgerium-io/metamask-extension'>Ledgerium Wallet</a> or make sure you are using an admin account");
        disableAllButtons();
        return;
        //throw new Error('Ledgerium Wallet Not fount');
      }
      if (!localWeb3.currentProvider.selectedAddress || !checkValidator(localWeb3.currentProvider.selectedAddress.toLowerCase())) {
        // show error and return 
        showError("Please install and unlock <a href='https://github.com/ledgerium-io/metamask-extension'>Ledgerium Wallet</a> or make sure you are using an admin account");
        disableAllButtons();
        return;
        //throw new Error('Ledgerium Wallet Not fount');
      }
      else {
        // show current meta mask account
        document.getElementById('currentMetaMaskAccount').innerHTML = `Current Ethereum Account: ${localWeb3.currentProvider.selectedAddress}`;
      }
      currentAccount = localWeb3.currentProvider.selectedAddress.toLowerCase();
      var map = {};     
      
      for(var i=0; i<validators.length; i++){
        // create a map to access fast
        map[validators[i].toLowerCase()] = true;
      }
      const table = document.getElementById('newNodes');
      // table to add button and new nodes
      //nodes.push({publicKey:"0xa05f26c53c63a87195e19865ea5ac7fd01599123"})
      for(var i=0; i<nodes.length; i++){
        var temp = nodes[i].publicKey.toLowerCase();
        if(!map[temp]){
          const adminRow = table.insertRow(-1);
          const cell1    = adminRow.insertCell(0);
          cell1.innerHTML= temp;
          const cell2    = adminRow.insertCell(1);
          cell2.innerHTML= `<button class='button-primary' onclick='castVote("${temp}",true)' value='${temp}' name="VFButton">Vote For</button><button onclick='castVote("${temp}",true)' value='${temp}' name="VAButton">Vote Against</button>`;
        }
      }
      console.log("before");
      if(currentAccount != nodes[0].publicKey){
        disableAllButtons();
        return;
      }
      console.log("here");
      // check newly added nodes
      const enabledButtons = document.getElementsByName('VFButton');
      const disabledButtons = document.getElementsByName('VAButton');
      map = {};
      map[currentAccount] = true;
      for( var i=0; i<votes.length; i++ ){
        const v = votes[i].validator.toLowerCase();
        if(v == currentAccount)
          map[votes[i].address.toLowerCase()]   = true;
      }

      // disable Vote for and vote against buttons which admin has already voted on
      for( var i=0; i<enabledButtons.length;i++){
        if(enabledButtons[i].value.toLowerCase() === currentAccount || map[enabledButtons[i].value]){
          enabledButtons[i].style.display = "none";
        }
      }
      for(var i=0;i<disabledButtons.length;i++){
        if(disabledButtons[i].value.toLowerCase() === currentAccount || map[disabledButtons[i].value]){
          disabledButtons[i].style.display = "none";
        }
      }
    }
    setInterval(function () {
      const nodes = {{{ json this.nodeRows }}};
      if ( localWeb3 && localWeb3.currentProvider.selectedAddress && currentAccount != localWeb3.currentProvider.selectedAddress.toLowerCase() ){
        currentAccount = localWeb3.currentProvider.selectedAddress.toLowerCase();
        location.reload();
      }
    }, 200);
    const castVote = (address,vote)=>{
      var myBody = {};
      myBody = { account:address, proposal:vote, currentAccount:currentAccount };
      fetch("/istanbul_propose", {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        mode: "cors", // no-cors, cors, *same-origin
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        credentials: "same-origin", // include, *same-origin, omit
        headers: {
            "Content-Type": "application/json",
            // "Content-Type": "application/x-www-form-urlencoded",
        },
        redirect: "follow", // manual, *follow, error
        referrer: "no-referrer", // no-referrer, *client
        body: JSON.stringify(myBody), // body data type must match "Content-Type" header
      })
      .then((data) => {
        successMessage()
        setTimeout(()=>{ location.reload(true); },10000);
      }) // JSON-string from `response.json()` call
      .catch((err) => {
        console.error(err);
        errorMessage("Server Responded with a error message please contact your admin")
      });
    }
  </script>
</div>